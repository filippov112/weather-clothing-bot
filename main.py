import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import requests
from datetime import datetime, timedelta
from dotenv import load_dotenv
from config import TEMPERATURE_RANGES, SPECIAL_CONDITIONS, API_SETTINGS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

load_dotenv()
# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_state = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–∞—Ç–∞–º–∏
date_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–°–µ–≥–æ–¥–Ω—è"), KeyboardButton(text="–ó–∞–≤—Ç—Ä–∞")],
        [KeyboardButton(text="–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞")]
    ],
    resize_keyboard=True
)


async def get_weather_forecast(city: str, date_offset: int = 0) -> dict | None:
    try:
        params = {
            "q": city,
            "appid": WEATHER_API_KEY,
            "units": API_SETTINGS["units"],
            "lang": API_SETTINGS["lang"],
            "cnt": 40  # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
        }

        response = requests.get(API_SETTINGS["weather_url"], params=params, timeout=10)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP –æ—à–∏–±–æ–∫

        data = response.json()

        if data.get("cod") != "200":
            logging.error(f"API error: {data.get('message', 'Unknown error')}")
            return None

        target_date = (datetime.now() + timedelta(days=date_offset)).date()
        forecasts = [f for f in data["list"]
                     if datetime.fromtimestamp(f["dt"]).date() == target_date]

        if not forecasts:
            logging.error(f"No forecast for {target_date}")
            return None

        # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –±–ª–∏–∂–µ –∫ –ø–æ–ª—É–¥–Ω—é
        best_forecast = min(forecasts,
                            key=lambda f: abs(datetime.fromtimestamp(f["dt"]).hour - 12))

        return {
            "date": target_date.strftime("%d.%m.%Y"),
            "temp": best_forecast["main"]["temp"],
            "feels_like": best_forecast["main"]["feels_like"],
            "description": best_forecast["weather"][0]["description"],
            "wind": best_forecast["wind"]["speed"],
            "humidity": best_forecast["main"]["humidity"],
            "rain": "rain" in best_forecast and best_forecast["rain"].get("3h", 0) > 0,
            "snow": "snow" in best_forecast and best_forecast["snow"].get("3h", 0) > 0
        }

    except requests.exceptions.RequestException as e:
        logging.error(f"Request failed: {e}")
    except (KeyError, ValueError) as e:
        logging.error(f"Data parsing error: {e}")
    except Exception as e:
        logging.error(f"Unexpected error: {e}")

    return None


def get_clothing_recommendation(weather: dict) -> str:
    recommendations = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
    for temp_range in TEMPERATURE_RANGES:
        if temp_range["min_temp"] <= weather["temp"] < temp_range["max_temp"]:
            recommendations.append(
                f"{temp_range['description']}: {temp_range['recommendation']}"
            )
            break

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
    for condition in SPECIAL_CONDITIONS:
        if condition["condition"](weather):
            recommendations.append(
                f"{condition['description']}: {condition['recommendation']}"
            )

    return "\n".join(recommendations)


@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å –æ–¥–µ–∂–¥—É –ø–æ –ø–æ–≥–æ–¥–µ.\n"
        "–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É:",
        reply_markup=date_keyboard
    )


@dp.message(lambda message: message.text.lower() in ["—Å–µ–≥–æ–¥–Ω—è", "–∑–∞–≤—Ç—Ä–∞", "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞"])
async def select_date(message: types.Message):
    user_state[message.from_user.id] = {
        "date_offset": 0 if message.text.lower() == "—Å–µ–≥–æ–¥–Ω—è" else 1 if message.text.lower() == "–∑–∞–≤—Ç—Ä–∞" else 2
    }
    await message.answer("–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?", reply_markup=types.ReplyKeyboardRemove())


@dp.message()
async def handle_city(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_state:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É!")
        return

    city = message.text
    date_offset = user_state[user_id]["date_offset"]

    await message.answer("‚è≥ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã...")

    try:
        weather = await get_weather_forecast(city, date_offset)
        if weather is None:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        recommendation = get_clothing_recommendation(weather)

        response = (
            f"üìÖ –î–∞—Ç–∞: {weather['date']}\n"
            f"üìç –ì–æ—Ä–æ–¥: {city}\n\n"
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather['temp']:.1f}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {weather['feels_like']:.1f}¬∞C)\n"
            f"üå§Ô∏è –ü–æ–≥–æ–¥–∞: {weather['description'].capitalize()}\n"
            f"üí® –í–µ—Ç–µ—Ä: {weather['wind']} –º/—Å\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather['humidity']}%\n\n"
            f"üß• **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–¥–µ–∂–¥–µ:**\n{recommendation}"
        )

        await message.answer(response, parse_mode="Markdown")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    finally:
        if user_id in user_state:
            del user_state[user_id]


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
